Interface Segregation Principle

interface Vehicle {
    void startEngine();
    void stopEngine();
    void drive();
    void fly();
}
/// a class called Car that implements the Vehicle interface:

class Car implements Vehicle {

    @Override
    public void startEngine() {
       System.out.println("Starting car engine.");
    }

    @Override
    public void stopEngine() {

        System.out.println("Stopping car engine.");
    }

    @Override
    public void drive() {

     System.out.println("Driving the car.");

    }

    @Override
    public void fly() {
        throw new UnsupportedOperationException("This vehicle cannot fly.");
    }
}
//In this example, the Vehicle interface has too many methods.
The Car class is forced to implement all of them, even though they cannot fly.
This violates the ISP because the Vehicle interface is not properly segregated into smaller interfaces based on related functionality.
